@model WeatherAggregator.ASPNet.Models.HomeViewModel
@{
    ViewData["Title"] = "Home Page";
}
<head>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="text-center">
        <h1 class="display-4">Welcome</h1>
        <div style="display: flex;">
            <!-- Sidebar -->
            @foreach (var location in Model.Locations)
            {
                <form asp-action="GetWeatherInfo" method="post">
                    <input type="hidden" name="Id" value="@location.Id" />
                    <input type="hidden" name="Name" value="@location.Name" />
                    <input type="hidden" name="Latitude" value="@location.Latitude" />
                    <input type="hidden" name="Longitude" value="@location.Longitude" />
                    <button type="submit">@location.Name</button>
                </form>
            }
            <a asp-controller="Locations" asp-action="Create" class="btn btn-primary">Add New Location</a>
        </div>
    </div>

  
    <div>

        @if (Model.WeatherModels != null && Model.WeatherModels.Any())
        {
            <div>
                <canvas id="temperatureChart" width="100%" height="40"></canvas>
            </div>

            <script>
                window.addEventListener('DOMContentLoaded', () => {
                    const ctx = document.getElementById('temperatureChart');
                    if (!ctx) return;

                                    const labels = [@Html.Raw(string.Join(", ", Model.MeteoPrediction
                .OrderBy(x => x.DateTime)
                .Select(x => $"'{x.DateTime:yyyy-MM-dd HH:mm}'")))];

                const meteoTemps = [@Html.Raw(string.Join(", ", Model.MeteoPrediction
                .OrderBy(x => x.DateTime)
                .Select(x => x.Temperature.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture))))];

                const weatherApiTemps = [@Html.Raw(string.Join(", ", Model.WeatherApiPrediction
                .OrderBy(x => x.DateTime)
                .Select(x => x.Temperature.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture))))];

                    const data = {
                        labels: labels,
                                        datasets: [{
                    label: 'Meteo Prediction (°C)',
                    data: meteoTemps,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 2,
                    tension: 0.1
                },
                {
                    label: 'WeatherAPI Prediction (°C)',
                    data: weatherApiTemps,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 2,
                    tension: 0.1
                }]

                    };

                    new Chart(ctx, {
                        type: 'line',
                        data: data,
                        options: {
                            responsive: true,
                            scales: {
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Time'
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Temperature (°C)'
                                    }
                                }
                            }
                        }
                    });
                });
            </script>

        }


    </div>
</body>
